@page
@using System.Data;
@model IntugentWebApp.Pages.Analysis.Analysis2Model
@{
    ViewData["ActivePage"] = "Mfg Analysis-2 Page";
}
@* Error Message *@
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="row my-5">
    <div class="row col-3">
        <div class="card card-default col-12 mt-8 h-auto">
            <div class="card-header align-items-center">
                <h2 class="">Choose Y1 and Y2 Axes</h2>
            </div>
            <div class="card-body">
                <div class="row align-items-center">
                    <div>
                        <!-- Choose X1 -->
                        <div class="form-floating mb-4" onchange="">
                            <select class="form-select" id="X1" onchange="UpdateCharts()">
                            @foreach (DataRowView row in Model.gX1)
                                {
                                    <option value="@row["PropName"]" selected="@(Model.gX1SelectedValue == row["PropName"].ToString())">@row["PropName"]</option>
                                } 
                            </select>
                            <label for="X1">Choose X1</label>
                        </div>
                        <!-- Choose X2 -->
                        <div class="form-floating mb-4" onchange="">
                            <select class="form-select" id="X2" onchange="UpdateCharts()">
                                @foreach (DataRowView row in Model.gX2)
                                {
                                    <option value="@row["PropName"]" selected="@(Model.gX2SelectedValue == row["PropName"].ToString())">@row["PropName"]</option>
                                }
                            </select>
                            <label for="X2">Choose X2</label>
                        </div>
                        <!-- Choose Y1 -->
                        <div class="form-floating mb-4" onchange="">
                            <select class="form-select" id="Y1" onchange="UpdateCharts()">
                                @foreach (DataRowView row in Model.gY1)
                                {
                                    <option value="@row["PropName"]" selected="@(Model.gY1SelectedValue == row["PropName"].ToString())">@row["PropName"]</option>
                                }
                            </select>
                            <label for="Y1">Choose Y1</label>
                        </div>
                        <!-- Choose Y2 -->
                        <div class="form-floating mb-4" onchange="">
                            <select class="form-select" id="Y2" onchange="UpdateCharts()">
                                @foreach (DataRowView row in Model.gY2)
                                {
                                    <option value="@row["PropName"]" selected="@(Model.gY2SelectedValue == row["PropName"].ToString())">@row["PropName"]</option>
                                }
                            </select>
                            <label for="Y2">Choose Y2</label>
                        </div>
                    </div>                   
                </div>

            </div>
        </div>
    <div class="mt-5">
        <h2 class="my-2">Chart Navigation</h2>
            <p class="my-1">- left-click-drag to pan</p>
            <p class="my-1">- left-click-drag on an axis to pan just that axis</p>
            <p class="my-1">- Scroll-wheel to zoom</p>
            <p class="my-1">- double-click to fit axis limits to data (may be a few times)</p>
    </div>    
    </div>
    <div class="row col-9 px-5">
        <div class="row col-6">
            <canvas id="gCircles12" height="400" width="650"></canvas>
            <canvas id="gCircles11" height="400" width="650"></canvas>
        </div>
        <div class="row col-6">
            <canvas id="gCircles22" height="400" width="650"></canvas>
            <canvas id="gCircles21" height="400" width="650"></canvas>

        </div>

    </div>
</div>
@section Scripts{
<script>
        let myScatterChart1;
        let myScatterChart2;
        let myScatterChart3;
        let myScatterChart4;
        let options = {}
        let options1 = {}
        let options2 = {}
        let options3 = {}
    document.addEventListener("DOMContentLoaded", function () {
        console.log('gX1Y1_X:', @Html.Raw(Json.Serialize(Model.gX1Y1_X)));
        console.log('gX1Y1_Y:', @Html.Raw(Json.Serialize(Model.gX1Y1_Y)));
        console.log('gX2Y2_X:', @Html.Raw(Json.Serialize(Model.gX2Y2_X)));
        console.log('gX2Y2_Y:', @Html.Raw(Json.Serialize(Model.gX2Y2_Y)));
        // Data and options for the first chart
        const data1 = {
            datasets: [{
                label: 'Dataset 1',
                data: @Html.Raw(Json.Serialize(Model.gX1Y1_X.Zip(Model.gX1Y1_Y, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(255, 0, 0, 0.6)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 1,
                pointRadius: 2
            }]
        };

        // Data and options for the second chart
        const data2 = {
            datasets: [{
                label: 'Dataset 2',
                data: @Html.Raw(Json.Serialize(Model.gX2Y2_X.Zip(Model.gX2Y2_Y, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(0, 0, 255, 0.6)',
                borderColor: 'rgba(0, 0, 255, 1)',
                borderWidth: 1,
                pointRadius: 2
            }]
        };

        const data3 = {
            datasets: [{
                label: 'Dataset 3',
                data: @Html.Raw(Json.Serialize(Model.gX1Y2_X.Zip(Model.gX1Y2_Y, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(0, 255, 0, 0.6)',
                borderColor: 'rgba(0, 255, 0, 1)',
                borderWidth: 1,
                pointRadius: 2
            }]
        };

        const data4 = {
            datasets: [{
                label: 'Dataset 3',
                data: @Html.Raw(Json.Serialize(Model.gX2Y1_X.Zip(Model.gX2Y1_Y, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(255, 255, 0, 0.6)',
                borderColor: 'rgba(255, 255, 0, 1)',
                borderWidth: 1,
                pointRadius: 2
            }]
        };

        // Common options for both charts
         options = {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom',
                    title: {
                        display: true,
                        text: `X1:- @Model.scnX1`,
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: `Y1:- @Model.scnY1`,
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'xy',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'xy',
                        wheel: {
                            enabled: true,
                        },
                        pinch: {
                            enabled: true
                        }
                    }
                }
            }
        };
         options1 = {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom',
                    title: {
                        display: true,
                        text: `X2:- @Model.scnX2`,
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: `Y2:- @Model.scnY2`,
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'xy',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'xy',
                        wheel: {
                            enabled: true,
                        },
                        pinch: {
                            enabled: true
                        }
                    }
                }
            }
        };
         options2 = {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom',
                    title: {
                        display: true,
                        text: `X1:- @Model.scnX1`,
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: `Y2:- @Model.scnY2`,
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'xy',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'xy',
                        wheel: {
                            enabled: true,
                        },
                        pinch: {
                            enabled: true
                        }
                    }
                }
            }
        };
         options3 = {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom',
                    title: {
                        display: true,
                        text: `X2:- @Model.scnX2`,
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: `Y1:- @Model.scnY1`,
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'xy',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'xy',
                        wheel: {
                            enabled: true,
                        },
                        pinch: {
                            enabled: true
                        }
                    }
                }
            }
        };

        // Create the first chart
        const ctx1 = document.getElementById('gCircles11').getContext('2d');
         myScatterChart1 = new Chart(ctx1, {
            type: 'scatter',
            data: data1,
            options: options
        });

        // Create the second chart
        const ctx2 = document.getElementById('gCircles22').getContext('2d');
        myScatterChart2 = new Chart(ctx2, {
            type: 'scatter',
            data: data2,
            options: options1
        });

        // Create the second chart
        const ctx3 = document.getElementById('gCircles12').getContext('2d');
        myScatterChart3 = new Chart(ctx3, {
            type: 'scatter',
            data: data3,
            options: options2
        });

        // Create the second chart
        const ctx4 = document.getElementById('gCircles21').getContext('2d');
       myScatterChart4 = new Chart(ctx4, {
            type: 'scatter',
            data: data4,
            options: options3
        });

    });
    function UpdateCharts() {
        var gX1SelectedValue = $('#X1').val();
        var gX2SelectedValue = $('#X2').val();
        var gY1SelectedValue = $('#Y1').val();
        var gY2SelectedValue = $('#Y2').val();
        console.log(gX1SelectedValue, gX2SelectedValue, gY1SelectedValue, gY2SelectedValue);
        var form = $('#SearchParamsForm');

        $.ajax({
            type: "POST",
            url: "/Analysis/Analysis2?handler=UpdateCharts",
            headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
            data: {
                gX1SelectedValue: gX1SelectedValue,
                gX2SelectedValue: gX2SelectedValue,
                gY1SelectedValue: gY1SelectedValue,
                gY2SelectedValue: gY2SelectedValue
            },
            success: function (response) {
                console.log('Server response:', response);

                myScatterChart1.data.datasets[0].data = [];
                myScatterChart2.data.datasets[0].data = [];
                myScatterChart3.data.datasets[0].data = [];
                myScatterChart4.data.datasets[0].data = [];

                // Update chart data sets
                myScatterChart1.data.datasets[0].data = response.gX1Y1_X.map((x, i) => ({ x, y: response.gX1Y1_Y[i] }));
                myScatterChart2.data.datasets[0].data = response.gX2Y2_X.map((x, i) => ({ x, y: response.gX2Y2_Y[i] }));
                myScatterChart3.data.datasets[0].data = response.gX1Y2_X.map((x, i) => ({ x, y: response.gX1Y2_Y[i] }));
                myScatterChart4.data.datasets[0].data = response.gX2Y1_X.map((x, i) => ({ x, y: response.gX2Y1_Y[i] }));
                    options.scales.x.title.text = gX1SelectedValue;
                    options.scales.y.title.text = gY1SelectedValue;
             options1.scales.x.title.text = gX2SelectedValue;
                    options1.scales.y.title.text = gY2SelectedValue;
  options2.scales.x.title.text = gX1SelectedValue;
                    options2.scales.y.title.text = gY2SelectedValue;
                    options3.scales.x.title.text = gX2SelectedValue;
                    options3.scales.y.title.text = gY1SelectedValue;

                    // Update the chart
                    myScatterChart1.options = options;
                    myScatterChart2.options = options1;
                    myScatterChart3.options = options2;
                    myScatterChart4.options = options3;
                // Update charts
                myScatterChart1.update();
                myScatterChart2.update();
                myScatterChart3.update();
                myScatterChart4.update();
                // location.reload();
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }
</script>
}