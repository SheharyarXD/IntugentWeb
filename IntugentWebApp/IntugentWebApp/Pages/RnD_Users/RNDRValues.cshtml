@page
@using System.Data;
@model IntugentWebApp.Pages.RnD_Users.RNDRValuesModel
@{
    ViewData["ActivePage"] = "R&D R Values Tool";
}

<!-- Error message -->
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="row">
    <div class="col-4">
        <!-- Key Calculation Parameter Card -->
        <div class="card card-default">
            <div class="card-header align-items-center">
                <h2 class="">Key Calculation Parameter</h2>
            </div>
            <div class="card-body">
                <!-- gMeasureTemp -->
                <div class="form-floating mb-2">
                    <input type="number" class="form-control text-center" id="gMeasureTemp" placeholder="" value="@Model.gMeasureTemp" onblur="LostFocus('gMeasureTemp',this.value)">
                    <label for="gMeasureTemp">Measuring Temperature (°F)</label>
                </div>
                <!-- Average Cell Size (microns) -->
                <div class="form-floating mb-2">
                    <input type="number" class="form-control text-center" id="gCellSize" placeholder="" value="@Model.gCellSize" onblur="LostFocus('gCellSize',this.value)">
                    <label for="gCellSize">Average Cell Size (microns)</label>
                </div>
                <!-- gCellPress -->
                <div class="form-floating mb-2">
                    <input type="number" class="form-control text-center" id="gCellPress" placeholder="" value="@Model.gCellPress" onblur="LostFocus('gCellPress',this.value)">
                    <label for="gCellPress">Initial Cell Pressure (atm)</label>
                </div>
                <!-- Polymer Density (lb/ft3³) -->
                <div class="form-floating mb-2">
                    <input type="number" class="form-control text-center" id="gPolDen" placeholder="" value="@Model.gPolDen" onblur="LostFocus('gPolDen',this.value)">
                    <label for="gPolDen">Polymer Density (lb/ft3³)</label>
                </div>
                <div class="form-floating col-12 ">
                    <button type="button" onclick="Click_ExportData()" class="btn btn-primary btn-sm">Set Default Values</button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-8">
        <!-- R  Values and Cell Gas Composition -->
        <div class="card card-default" style="min-height:300px;">
            <div class="card-header align-items-center">
                <h2 class="">R  Values and Cell Gas Composition</h2>
            </div>
            <div class="card-body">
                <table class="table table-sm table-bordered table-hover table-striped table-responsive-md">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col">Property</th>
                            <th scope="col">#1</th>
                            <th scope="col">#2</th>
                            <th scope="col">#3</th>
                            <th scope="col">#4</th>
                            <th scope="col">#5</th>
                            <th scope="col">#6</th>
                            <th scope="col">#7</th>
                            <th scope="col">#8</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (DataRowView row in Model.gGasComp)
                        {
                            <tr>
                                <td>@row["GasName"]</td>
                                <td>@row["#1"]</td>
                                <td>@row["#2"]</td>
                                <td>@row["#3"]</td>
                                <td>@row["#4"]</td>
                                <td>@row["#5"]</td>
                                <td>@row["#6"]</td>
                                <td>@row["#7"]</td>
                                <td>@row["#8"]</td>
                            </tr>
                        } 
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-4">
        @* Initial R Value Analyses *@
        <div class="card card-default">
            <div class="card-header align-items-center">
                <h2 class=""> Initial R Value Analyses</h2>
            </div>
            <div class="card-body">
           <!-- X Axis -->
<div class="form-floating mb-2">
                    <select class="form-select" id="XAxis" onchange="gAxisSelectionChanged(this,'gXAxis')">
        <!option id="gCell" value="CS" @(Model.gXAxisSelectedValue == "CS" ? "selected" : "")>Cell Size (Microns)</!option>
        <!option id="gDesn" value="DE" @(Model.gXAxisSelectedValue == "DE" ? "selected" : "")>Density (kg/m&#x00B3;)</!option>
        <!option id="gTemp" value="TE" @(Model.gXAxisSelectedValue == "TE" ? "selected" : "")>Temperature (°F)</!option>
    </select>
    <label for="XAxis">X Axis</label>
</div>

<!-- Y Axis -->
<div class="form-floating mb-2">
                    <select class="form-select" id="YAxis" onchange="gAxisSelectionChanged(this,'gYAxis')">
        <!option id="gKValue" value="KV" @(Model.gYAxisSelectedValue == "KV" ? "selected='selected'" : "")>K-Value, Conductivity (mW/m-K)</!option>
        <!option id="gRValue" value="RV" @(Model.gYAxisSelectedValue == "RV" ? "selected='selected'" : "")>R-Value, Resistance (ft&#x00B2;-°F-hr/Btu)</!option>
    </select>
    <label for="YAxis">Y Axis</label>
</div>
               </div>
           </div>
                @* Chart Navigation *@
          <div class="mt-5">
              <h2 class="my-2">Chart Navigation</h2>
              <p class="my-1">- left-click-drag to pan</p>
              <p class="my-1">- left-click-drag on an axis to pan just that axis</p>
              <p class="my-1">- Scroll-wheel to zoom</p>
              <p class="my-1">- double-click to fit axis limits to data (may be a few times)</p>
          </div>
    </div>
   <div class="col-8">
       <canvas id="charts"></canvas>
   </div>
</div>
@section Scripts{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const ctx = document.getElementById('charts').getContext('2d');

            const data1 = {
                label: 'Dataset 1',
                data: @Html.Raw(Json.Serialize(Model.dArX.Zip(Model.dAr0, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(255, 0, 0, 0.6)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 3,
                pointRadius: 0
            };

            const data2 = {
                label: 'Dataset 2',
                data: @Html.Raw(Json.Serialize(Model.dArX.Zip(Model.dAr1, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(0, 0, 255, 0.6)',
                borderColor: 'rgba(0, 0, 255, 1)',
                borderWidth: 3,
                pointRadius: 0
            };

            const data3 = {
                label: 'Dataset 3',
                data: @Html.Raw(Json.Serialize(Model.dArX.Zip(Model.dAr2, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(0, 255, 0, 0.6)',
                borderColor: 'rgba(0, 255, 0, 1)',
                borderWidth: 3,
                pointRadius: 0
            };

            const data4 = {
                label: 'Dataset 4',
                data: @Html.Raw(Json.Serialize(Model.dArX.Zip(Model.dAr3, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(255, 255, 0, 0.6)',
                borderColor: 'rgba(255, 255, 0, 1)',
                borderWidth: 3,
                pointRadius: 0
            };

            const data5 = {
                label: 'Dataset 5',
                data: @Html.Raw(Json.Serialize(Model.dArX.Zip(Model.dAr4, (x, y) => new { x, y }))),
                backgroundColor: 'rgba(255, 0, 0, 0.6)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 3,
                pointRadius: 0
            };

            const config = {
                type: 'line',
                data: {
                    datasets: [data1, data2, data3, data4, data5]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'Temperature (F)',
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'R / n value',
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'xy',
                            },
                            zoom: {
                                enabled: true,
                                mode: 'xy',
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                }
                            }
                        }
                    }
                }
            };

            const myChart = new Chart(ctx, config);

            document.getElementById('charts').addEventListener('dblclick', () => {
                myChart.resetZoom();
            });
        });
        function gAxisSelectionChanged(selectElement, name) {
            const axisValue = selectElement.value;
            const axisName = name;
            const selectedItem = selectElement.options[selectElement.selectedIndex];

            const selectedId = selectedItem.id; 

            AxisChanged(axisName, axisValue, selectedId);
        }
        
        function LostFocus(Name, Value) {
            $.ajax({
                type: "POST",
                url: "/RnD_Users/RNDRValues?handler=LostFocus_Fields",
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                data: { Name: Name, Value: Value },
                success: function (response) {
                    //console.log('Server response:', response);
                      location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }
        function AxisChanged(Name, value,item) {
             console.log('Input values - Name:', Name, 'Value:', value, 'Item', item);
            // var form = $('#SearchParamsForm');

            $.ajax({
                type: "POST",
                url: "/RnD_Users/RNDRValues?handler=GAxis_SelectionChanged",
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                data: { Name: Name, value: value, item: item },
                success: function (response) {
                    //console.log('Server response:', response);
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }
        function Click_ExportData() {
            //  console.log('Input values - Name:', Name, 'Value:', Value);
            // var form = $('#SearchParamsForm');

            $.ajax({
                type: "POST",
                url: "/RnD_Users/RNDRValues?handler=ExportData",
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                success: function (response) {
                   console.log('Server response:', response);
                   // location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        }
    </script>
}
